vizAlphaCCM_TE <- melt(df.alphaCCM_TE,id.vars = 'timeScaleCut',
variable.name = 'alphaType',value.name = 'AlphaValue')
pltAlpha_CCM_TE <- ggplot(vizAlphaCCM_TE,aes(x = timeScaleCut,y = AlphaValue,color = alphaType)) +
xlab('Year') + ylab(expression(paste(alpha,'(t)'))) +
ylim(c(0,15)) +
geom_line(size = 1) +
theme_bw() +
scale_color_manual(labels = c(expression(paste(alpha[CCM],'(t)')),
expression(paste(alpha[TE],'(t)')),
expression(paste('Real ',alpha,'(t)'))),
values=c('blue','red','forestgreen')) +
theme(legend.position = 'top',
legend.direction = 'horizontal',
legend.margin = margin(t = 0,unit = 'cm'),
legend.text = element_text(hjust=0.5, vjust=0.5,size = 20)) +
theme(legend.title=element_blank()) +
theme(axis.text = element_text(hjust=0.5, vjust=0.5,size = 20)) +
theme(axis.title = element_text(hjust=0.5, vjust=0.5,size = 20)) +
theme(plot.margin=unit(c(1,1,1,1),'lines')) +
scale_x_continuous(breaks=seq(2002,2014,1))
pltAlpha_CCM_TE
####-------------- High Threshold: alpha(CCM) & alpha(TE) & Real Alpha -----------####
df.alphaCCM_TE_Thre <- data.frame(
timeScaleCut,
alphaNetworkTimeCCMThre,
alphaNetworkTimeTEThre,
aveTE_TEThre,
alphaOverTime
)
vizAlphaCCM_TE_Thre <- melt(df.alphaCCM_TE_Thre,id.vars = 'timeScaleCut',
variable.name = 'alphaTypeThre',value.name = 'AlphaValueThre')
pltAlpha_CCM_TE_Thre <- ggplot(vizAlphaCCM_TE_Thre,aes(x = timeScaleCut,y = AlphaValueThre,color = alphaTypeThre)) +
xlab('Year') + ylab('Alpha Diversity (TE>0.5,CCM>0)') +
ylim(c(0,15)) +
geom_line(size = 1) +
theme_bw() +
scale_color_manual(labels = c('CCM','TE','Mean(TE)','Classical'),
values=c('blue','red','darkorange3','forestgreen')) +
theme(legend.position = 'top',
legend.direction = 'horizontal',
legend.margin = margin(t = 0,unit = 'cm'),
legend.text = element_text(hjust=0.5, vjust=0.5,size = 20)) +
theme(legend.title=element_blank()) +
theme(axis.text = element_text(hjust=0.5, vjust=0.5,size = 20)) +
theme(axis.title = element_text(hjust=0.5, vjust=0.5,size = 20))
pltAlpha_CCM_TE_Thre
####-------------- High Threshold: alpha(CCM) & alpha(TE) & Real Alpha -----------####
df.alphaCCM_TE_Thre <- data.frame(
timeScaleCut,
alphaNetworkTimeCCMThre,
alphaNetworkTimeTEThre,
# aveTE_TEThre,
alphaOverTime
)
vizAlphaCCM_TE_Thre <- melt(df.alphaCCM_TE_Thre,id.vars = 'timeScaleCut',
variable.name = 'alphaTypeThre',value.name = 'AlphaValueThre')
pltAlpha_CCM_TE_Thre <- ggplot(vizAlphaCCM_TE_Thre,aes(x = timeScaleCut,y = AlphaValueThre,color = alphaTypeThre)) +
xlab('Year') + ylab('Alpha Diversity (TE>0.5,CCM>0)') +
ylim(c(0,15)) +
geom_line(size = 1) +
theme_bw() +
scale_color_manual(labels = c('CCM','TE','Classical'),
values=c('blue','red','forestgreen')) +
theme(legend.position = 'top',
legend.direction = 'horizontal',
legend.margin = margin(t = 0,unit = 'cm'),
legend.text = element_text(hjust=0.5, vjust=0.5,size = 20)) +
theme(legend.title=element_blank()) +
theme(axis.text = element_text(hjust=0.5, vjust=0.5,size = 20)) +
theme(axis.title = element_text(hjust=0.5, vjust=0.5,size = 20))
pltAlpha_CCM_TE_Thre
cc_alpha <- 0
for (ii in seq(dim(alphaNetworkTimeCCMThre)[2])) {
# cc_update <- cor(alphaOverTime, alphaNetworkTimeCCMThre[,ii])
cc_update <- mutinformation(alphaOverTime, alphaNetworkTimeCCMThre[,ii])
if(is.na(cc_update)){
next
} else if (cc_update >= cc_alpha){
cc_alpha <- cc_update
alphaNetworkTimeCCMThre_optimal <- alphaNetworkTimeCCMThre[,ii]
print(ii)
}
}
cc_alpha <- 0
for (ii in seq(dim(alphaNetworkTimeCCMThre)[2])) {
# cc_update <- cor(alphaOverTime, alphaNetworkTimeCCMThre[,ii])
cc_update <- mutinformation(alphaOverTime, alphaNetworkTimeCCMThre[,ii])
if(is.na(cc_update)){
next
} else if (cc_update >= cc_alpha){
cc_alpha <- cc_update
alphaNetworkTimeCCMThre_optimal <- alphaNetworkTimeCCMThre[,ii]
print(ii)
}
}
alphaNetworkTimeCCMThre_optimal
alphaNetworkTimeCCMThre[,2]
alphaNetworkTimeCCM <- matrix(nrow = calTimes,ncol = 1)
alphaNetworkTimeCCMThre <- matrix(nrow = calTimes,ncol = 11)
startYear <- 2002
startMonth <- 6.5    # June-Early
endYear <- 2014
endMonth <- 4.5      # April-Early
samplePerYear <- 24
samplePerMonth <- 2
timeInterval <- 1/samplePerYear
fromSeq <- startYear + (startMonth-1)*samplePerMonth*timeInterval
toSeq <- endYear + (endMonth-1)*samplePerMonth*timeInterval
timeScale <- seq(fromSeq,toSeq,length.out = timeAllLen)
timeScaleCut <- timeScale[selectLen:timeAllLen]
####----------- Dominant Eigenvalue Calculation of CCM-----------####
for (tt in 1:calTimes) {
data_FishCut <- data_fishCommunity[tt:(tt+selectLen-1),]
for (kk in 1:numSpecies) {
for (jj in 1:numSpecies) {
if(kk == jj)
ccmMatTime[kk,jj] <- 0
else{
ccmTablePair <- ccm(data_FishCut, E = 3,
lib_column = colnames(data_fishCommunity)[[3+kk]],
target_column = colnames(data_fishCommunity)[[3+jj]],
lib_sizes = seq(10,30,by = 5),
num_samples = 100, random_libs = TRUE, replace = TRUE, silent = TRUE)
ccmTablePairMean <- ccm_means(ccmTablePair)
ccmMatTime[kk,jj] <- ccmTablePairMean$rho[length(ccmTablePairMean$rho)]
}
}
}
ccmMatTime[is.na(ccmMatTime)] <- 0
ccmEigTime[tt,] <- max(Re(eigen(ccmMatTime)$values))
ccmMeanTime[tt,] <- sum(ccmMatTime)/(numSpecies^2-numSpecies)
ccmMatTimeVector <- as.vector(ccmMatTime)
ccmMatTimeVectorNoDiag <- ccmMatTimeVector[-seq(1,numSpecies^2,(numSpecies+1))] # Remove Diagonal elements
ccmRatio[tt,] <- sum(ccmMatTimeVectorNoDiag[ccmMatTimeVectorNoDiag>=median(ccmMatTimeVectorNoDiag)])/sum(ccmMatTimeVectorNoDiag)
ccmNumRatio[tt,] <- length(ccmMatTimeVectorNoDiag[ccmMatTimeVectorNoDiag>=median(ccmMatTimeVectorNoDiag)])/length(ccmMatTimeVectorNoDiag)
alphaNetworkTimeCCM[tt,] <- alphaOverNetwork(ccmMatTime,-1)
for (ii in 0:10) {
alphaNetworkTimeCCMThre[tt,ii+1] <- alphaOverNetwork(ccmMatTime,ii*0.1)
}
}
cc_alpha <- 0
for (ii in seq(dim(alphaNetworkTimeCCMThre)[2])) {
# cc_update <- cor(alphaOverTime, alphaNetworkTimeCCMThre[,ii])
cc_update <- mutinformation(alphaOverTime, alphaNetworkTimeCCMThre[,ii])
if(is.na(cc_update)){
next
} else if (cc_update >= cc_alpha){
cc_alpha <- cc_update
alphaNetworkTimeCCMThre_optimal <- alphaNetworkTimeCCMThre[,ii]
print(ii)
}
}
cc_alpha <- 0
for (ii in seq(dim(alphaNetworkTimeCCMThre)[2])) {
# cc_update <- cor(alphaOverTime, alphaNetworkTimeCCMThre[,ii])
cc_update <- mutinformation(alphaOverTime, alphaNetworkTimeCCMThre[,ii])
if(is.na(cc_update)){
next
} else if (cc_update >= cc_alpha){
cc_alpha <- cc_update
alphaNetworkTimeCCMThre_optimal <- alphaNetworkTimeCCMThre[,ii]
print(ii)
}
}
cc_alpha <- 0
for (ii in seq(dim(alphaNetworkTimeTEThre)[2])) {
# cc_update <- cor(alphaOverTime, alphaNetworkTimeTEThre[,ii])
cc_update <- mutinformation(alphaOverTime, alphaNetworkTimeTEThre[,ii])
if(is.na(cc_update)){
next
} else if (cc_update >= cc_alpha){
cc_alpha <- cc_update
alphaNetworkTimeTEThre_optimal <- alphaNetworkTimeTEThre[,ii]
print(ii)
print(cc_alpha)
}
}
for (tt in 1:calTimes) {
for (kk in 1:numSpecies) {
srcSpecies <- data_fishCommunity[[3+kk]]
srcData <- srcSpecies[tt:(tt+selectLen-1)]
shannonTimeSpecies[kk,] <- entropy(srcData,method = 'CS') # ML,CS,Laplace,
for (jj in 1:numSpecies) {
if (kk == jj)
teMatTime[kk,jj] <- 0
else{
dstSpecies <- data_fishCommunity[[3+jj]]
dstData <- dstSpecies[tt:(tt+selectLen-1)]
teMatTime[kk,jj] <- teCalFunc_JIDT_lag(srcData,dstData,t_lag)
}
}
}
shannonIndex[tt,] <- sum(shannonTimeSpecies)
teEigTime[tt,] <- max(Re(eigen(teMatTime)$values))
teMeanTime[tt,] <- sum(teMatTime)/(numSpecies^2-numSpecies)
teMatTimeVector <- as.vector(teMatTime)
teMatTimeVectorNoDiag <- teMatTimeVector[-seq(1,numSpecies^2,(numSpecies+1))] # Remove Diagonal elements
# teRatio[tt,] <- sum(teMatTimeVectorNoDiag>=median(teMatTimeVectorNoDiag))/(numSpecies^2-numSpecies)
teRatio[tt,] <- sum(teMatTimeVectorNoDiag[teMatTimeVectorNoDiag>=median(teMatTimeVectorNoDiag)])/sum(teMatTimeVectorNoDiag)
teNumRatio[tt,] <- length(teMatTimeVectorNoDiag[teMatTimeVectorNoDiag>=median(teMatTimeVectorNoDiag)])/length(teMatTimeVectorNoDiag)
alphaNetworkTimeTE[tt,] <- alphaOverNetwork(teMatTime,0)
for (ii in 0:10) {
alphaNetworkTimeTEThre[tt,ii+1] <- alphaOverNetwork(teMatTime,ii*0.1)
}
}
alphaNetworkTimeTEThre <- matrix(nrow = calTimes,ncol = 11)
startYear <- 2002
startMonth <- 6.5    # June-Early
endYear <- 2014
endMonth <- 4.5      # April-Early
samplePerYear <- 24
samplePerMonth <- 2
timeInterval <- 1/samplePerYear
fromSeq <- startYear + (startMonth-1)*samplePerMonth*timeInterval
toSeq <- endYear + (endMonth-1)*samplePerMonth*timeInterval
timeScale <- seq(fromSeq,toSeq,length.out = timeAllLen)
timeScaleCut <- timeScale[selectLen:timeAllLen]
####----------- Dominant Eigenvalue Calculation of TE -----------####
for (tt in 1:calTimes) {
for (kk in 1:numSpecies) {
srcSpecies <- data_fishCommunity[[3+kk]]
srcData <- srcSpecies[tt:(tt+selectLen-1)]
shannonTimeSpecies[kk,] <- entropy(srcData,method = 'CS') # ML,CS,Laplace,
for (jj in 1:numSpecies) {
if (kk == jj)
teMatTime[kk,jj] <- 0
else{
dstSpecies <- data_fishCommunity[[3+jj]]
dstData <- dstSpecies[tt:(tt+selectLen-1)]
teMatTime[kk,jj] <- teCalFunc_JIDT_lag(srcData,dstData,t_lag)
}
}
}
shannonIndex[tt,] <- sum(shannonTimeSpecies)
teEigTime[tt,] <- max(Re(eigen(teMatTime)$values))
teMeanTime[tt,] <- sum(teMatTime)/(numSpecies^2-numSpecies)
teMatTimeVector <- as.vector(teMatTime)
teMatTimeVectorNoDiag <- teMatTimeVector[-seq(1,numSpecies^2,(numSpecies+1))] # Remove Diagonal elements
# teRatio[tt,] <- sum(teMatTimeVectorNoDiag>=median(teMatTimeVectorNoDiag))/(numSpecies^2-numSpecies)
teRatio[tt,] <- sum(teMatTimeVectorNoDiag[teMatTimeVectorNoDiag>=median(teMatTimeVectorNoDiag)])/sum(teMatTimeVectorNoDiag)
teNumRatio[tt,] <- length(teMatTimeVectorNoDiag[teMatTimeVectorNoDiag>=median(teMatTimeVectorNoDiag)])/length(teMatTimeVectorNoDiag)
alphaNetworkTimeTE[tt,] <- alphaOverNetwork(teMatTime,0)
for (ii in 0:10) {
alphaNetworkTimeTEThre[tt,ii+1] <- alphaOverNetwork(teMatTime,ii*0.1)
}
}
library('rEDM');
library("rJava")
library('plot3D')
library(plotly)
library(readr)
library(entropy)
source('teCalFunc_JIDT.R')
source('alphaOverNet.R')
.jinit()
.jaddClassPath("infodynamics.jar")
####----------- Data and Parameter Initialization -----------####
data_fishCommunity <- read_csv("Maizuru_dominant_sp.csv")
timeAllLen <- nrow(data_fishCommunity)
numSpecies <- 15L
selectLen <- 30L
timeStep <- 1L
t_lag <- 1L
calTimes <- timeAllLen - selectLen + 1L
teMatTime <- matrix(nrow = numSpecies,ncol = numSpecies)
teEigTime <- matrix(nrow = calTimes,ncol = 1)
teMeanTime <- matrix(nrow = calTimes,ncol = 1)
teRatio <- matrix(nrow = calTimes,ncol = 1)
teNumRatio <- matrix(nrow = calTimes,ncol = 1)
simpsonDiversity <- matrix(nrow = timeAllLen,ncol = 1)
alphaDiversity <- matrix(nrow = timeAllLen,ncol = 1)
alphaNetworkTimeTE <- matrix(nrow = calTimes,ncol = 1)
alphaNetworkTimeTEThre <- matrix(nrow = calTimes,ncol = 11)
shannonTimeSpecies <- matrix(nrow = numSpecies,ncol = 1)
shannonIndex <- matrix(nrow = calTimes,ncol = 1)
startYear <- 2002
startMonth <- 6.5    # June-Early
endYear <- 2014
endMonth <- 4.5      # April-Early
samplePerYear <- 24
samplePerMonth <- 2
timeInterval <- 1/samplePerYear
fromSeq <- startYear + (startMonth-1)*samplePerMonth*timeInterval
toSeq <- endYear + (endMonth-1)*samplePerMonth*timeInterval
timeScale <- seq(fromSeq,toSeq,length.out = timeAllLen)
timeScaleCut <- timeScale[selectLen:timeAllLen]
for (tt in 1:calTimes) {
for (kk in 1:numSpecies) {
srcSpecies <- data_fishCommunity[[3+kk]]
srcData <- srcSpecies[tt:(tt+selectLen-1)]
shannonTimeSpecies[kk,] <- entropy(srcData,method = 'CS') # ML,CS,Laplace,
for (jj in 1:numSpecies) {
if (kk == jj)
teMatTime[kk,jj] <- 0
else{
dstSpecies <- data_fishCommunity[[3+jj]]
dstData <- dstSpecies[tt:(tt+selectLen-1)]
teMatTime[kk,jj] <- teCalFunc_JIDT_lag(srcData,dstData,t_lag)
}
}
}
shannonIndex[tt,] <- sum(shannonTimeSpecies)
teEigTime[tt,] <- max(Re(eigen(teMatTime)$values))
teMeanTime[tt,] <- sum(teMatTime)/(numSpecies^2-numSpecies)
teMatTimeVector <- as.vector(teMatTime)
teMatTimeVectorNoDiag <- teMatTimeVector[-seq(1,numSpecies^2,(numSpecies+1))] # Remove Diagonal elements
# teRatio[tt,] <- sum(teMatTimeVectorNoDiag>=median(teMatTimeVectorNoDiag))/(numSpecies^2-numSpecies)
teRatio[tt,] <- sum(teMatTimeVectorNoDiag[teMatTimeVectorNoDiag>=median(teMatTimeVectorNoDiag)])/sum(teMatTimeVectorNoDiag)
teNumRatio[tt,] <- length(teMatTimeVectorNoDiag[teMatTimeVectorNoDiag>=median(teMatTimeVectorNoDiag)])/length(teMatTimeVectorNoDiag)
alphaNetworkTimeTE[tt,] <- alphaOverNetwork(teMatTime,0)
for (ii in 0:10) {
alphaNetworkTimeTEThre[tt,ii+1] <- alphaOverNetwork(teMatTime,ii*0.1)
}
}
library('rEDM');
library("rJava")
library('plot3D')
library(plotly)
library(readr)
library(entropy)
source('teCalFunc_JIDT.R')
source('alphaOverNet.R')
.jinit()
.jaddClassPath("infodynamics.jar")
####----------- Data and Parameter Initialization -----------####
data_fishCommunity <- read_csv("Maizuru_dominant_sp.csv")
timeAllLen <- nrow(data_fishCommunity)
numSpecies <- 15L
selectLen <- 30L
timeStep <- 1L
t_lag <- 1L
calTimes <- timeAllLen - selectLen + 1L
teMatTime <- matrix(nrow = numSpecies,ncol = numSpecies)
teEigTime <- matrix(nrow = calTimes,ncol = 1)
teMeanTime <- matrix(nrow = calTimes,ncol = 1)
teRatio <- matrix(nrow = calTimes,ncol = 1)
teNumRatio <- matrix(nrow = calTimes,ncol = 1)
simpsonDiversity <- matrix(nrow = timeAllLen,ncol = 1)
alphaDiversity <- matrix(nrow = timeAllLen,ncol = 1)
alphaNetworkTimeTE <- matrix(nrow = calTimes,ncol = 1)
alphaNetworkTimeTEThre <- matrix(nrow = calTimes,ncol = 11)
shannonTimeSpecies <- matrix(nrow = numSpecies,ncol = 1)
shannonIndex <- matrix(nrow = calTimes,ncol = 1)
startYear <- 2002
startMonth <- 6.5    # June-Early
endYear <- 2014
endMonth <- 4.5      # April-Early
samplePerYear <- 24
samplePerMonth <- 2
timeInterval <- 1/samplePerYear
fromSeq <- startYear + (startMonth-1)*samplePerMonth*timeInterval
toSeq <- endYear + (endMonth-1)*samplePerMonth*timeInterval
timeScale <- seq(fromSeq,toSeq,length.out = timeAllLen)
timeScaleCut <- timeScale[selectLen:timeAllLen]
for (tt in 1:calTimes) {
for (kk in 1:numSpecies) {
srcSpecies <- data_fishCommunity[[3+kk]]
srcData <- srcSpecies[tt:(tt+selectLen-1)]
shannonTimeSpecies[kk,] <- entropy(srcData,method = 'CS') # ML,CS,Laplace,
for (jj in 1:numSpecies) {
if (kk == jj)
teMatTime[kk,jj] <- 0
else{
dstSpecies <- data_fishCommunity[[3+jj]]
dstData <- dstSpecies[tt:(tt+selectLen-1)]
teMatTime[kk,jj] <- teCalFunc_JIDT_lag(srcData,dstData,t_lag)
}
}
}
shannonIndex[tt,] <- sum(shannonTimeSpecies)
teEigTime[tt,] <- max(Re(eigen(teMatTime)$values))
teMeanTime[tt,] <- sum(teMatTime)/(numSpecies^2-numSpecies)
teMatTimeVector <- as.vector(teMatTime)
teMatTimeVectorNoDiag <- teMatTimeVector[-seq(1,numSpecies^2,(numSpecies+1))] # Remove Diagonal elements
# teRatio[tt,] <- sum(teMatTimeVectorNoDiag>=median(teMatTimeVectorNoDiag))/(numSpecies^2-numSpecies)
teRatio[tt,] <- sum(teMatTimeVectorNoDiag[teMatTimeVectorNoDiag>=median(teMatTimeVectorNoDiag)])/sum(teMatTimeVectorNoDiag)
teNumRatio[tt,] <- length(teMatTimeVectorNoDiag[teMatTimeVectorNoDiag>=median(teMatTimeVectorNoDiag)])/length(teMatTimeVectorNoDiag)
alphaNetworkTimeTE[tt,] <- alphaOverNetwork(teMatTime,0)
for (ii in 0:10) {
alphaNetworkTimeTEThre[tt,ii+1] <- alphaOverNetwork(teMatTime,ii*0.1)
}
}
for (tt in 1:calTimes) {
for (kk in 1:numSpecies) {
srcSpecies <- data_fishCommunity[[3+kk]]
srcData <- srcSpecies[tt:(tt+selectLen-1)]
shannonTimeSpecies[kk,] <- entropy::entropy(srcData,method = 'CS') # ML,CS,Laplace,
for (jj in 1:numSpecies) {
if (kk == jj)
teMatTime[kk,jj] <- 0
else{
dstSpecies <- data_fishCommunity[[3+jj]]
dstData <- dstSpecies[tt:(tt+selectLen-1)]
teMatTime[kk,jj] <- teCalFunc_JIDT_lag(srcData,dstData,t_lag)
}
}
}
shannonIndex[tt,] <- sum(shannonTimeSpecies)
teEigTime[tt,] <- max(Re(eigen(teMatTime)$values))
teMeanTime[tt,] <- sum(teMatTime)/(numSpecies^2-numSpecies)
teMatTimeVector <- as.vector(teMatTime)
teMatTimeVectorNoDiag <- teMatTimeVector[-seq(1,numSpecies^2,(numSpecies+1))] # Remove Diagonal elements
# teRatio[tt,] <- sum(teMatTimeVectorNoDiag>=median(teMatTimeVectorNoDiag))/(numSpecies^2-numSpecies)
teRatio[tt,] <- sum(teMatTimeVectorNoDiag[teMatTimeVectorNoDiag>=median(teMatTimeVectorNoDiag)])/sum(teMatTimeVectorNoDiag)
teNumRatio[tt,] <- length(teMatTimeVectorNoDiag[teMatTimeVectorNoDiag>=median(teMatTimeVectorNoDiag)])/length(teMatTimeVectorNoDiag)
alphaNetworkTimeTE[tt,] <- alphaOverNetwork(teMatTime,0)
for (ii in 0:10) {
alphaNetworkTimeTEThre[tt,ii+1] <- alphaOverNetwork(teMatTime,ii*0.1)
}
}
cc_alpha <- 0
for (ii in seq(dim(alphaNetworkTimeTEThre)[2])) {
# cc_update <- cor(alphaOverTime, alphaNetworkTimeTEThre[,ii])
cc_update <- mutinformation(alphaOverTime, alphaNetworkTimeTEThre[,ii])
if(is.na(cc_update)){
next
} else if (cc_update >= cc_alpha){
cc_alpha <- cc_update
alphaNetworkTimeTEThre_optimal <- alphaNetworkTimeTEThre[,ii]
print(ii)
print(cc_alpha)
}
}
cc_alpha <- 0
for (ii in seq(dim(alphaNetworkTimeCCMThre)[2])) {
# cc_update <- cor(alphaOverTime, alphaNetworkTimeCCMThre[,ii])
cc_update <- mutinformation(alphaOverTime, alphaNetworkTimeCCMThre[,ii])
if(is.na(cc_update)){
next
} else if (cc_update >= cc_alpha){
cc_alpha <- cc_update
alphaNetworkTimeCCMThre_optimal <- alphaNetworkTimeCCMThre[,ii]
print(ii)
}
}
cc_alpha <- 0
for (ii in seq(dim(alphaNetworkTimeTEThre)[2])) {
# cc_update <- cor(alphaOverTime, alphaNetworkTimeTEThre[,ii])
cc_update <- mutinformation(alphaOverTime, alphaNetworkTimeTEThre[,ii])
if(is.na(cc_update)){
next
} else if (cc_update >= cc_alpha){
cc_alpha <- cc_update
alphaNetworkTimeTEThre_optimal <- alphaNetworkTimeTEThre[,ii]
print(ii)
print(cc_alpha)
}
}
pltAlpha_CCM_TE_Thre <- ggplot(vizAlphaCCM_TE_Thre,aes(x = timeScaleCut,y = AlphaValueThre,color = alphaTypeThre)) +
xlab('Year') + ylab('Alpha Diversity (TE>0.5,CCM>0)') +
ylim(c(0,15)) +
geom_line(size = 1) +
theme_bw() +
scale_color_manual(labels = c('CCM','TE','Classical'),
values=c('blue','red','forestgreen')) +
theme(legend.position = 'top',
legend.direction = 'horizontal',
legend.margin = margin(t = 0,unit = 'cm'),
legend.text = element_text(hjust=0.5, vjust=0.5,size = 20)) +
theme(legend.title=element_blank()) +
theme(axis.text = element_text(hjust=0.5, vjust=0.5,size = 20)) +
theme(axis.title = element_text(hjust=0.5, vjust=0.5,size = 20)) +
scale_x_continuous(breaks=seq(2002,2014,1))
pltAlpha_CCM_TE_Thre
pltAlpha_CCM_TE_Thre <- ggplot(vizAlphaCCM_TE_Thre,aes(x = timeScaleCut,y = AlphaValueThre,color = alphaTypeThre)) +
xlab('Year') + ylab(expression(paste('Real ',alpha,'(t)')),expression(paste('Real ',alpha,'(g)'))) +
ylim(c(0,15)) +
geom_line(size = 1) +
theme_bw() +
scale_color_manual(labels = c('CCM','TE',expression(paste('Real ',alpha,'(t)'))),
values=c('blue','red','forestgreen')) +
theme(legend.position = 'top',
legend.direction = 'horizontal',
legend.margin = margin(t = 0,unit = 'cm'),
legend.text = element_text(hjust=0.5, vjust=0.5,size = 20)) +
theme(legend.title=element_blank()) +
theme(axis.text = element_text(hjust=0.5, vjust=0.5,size = 20)) +
theme(axis.title = element_text(hjust=0.5, vjust=0.5,size = 20)) +
scale_x_continuous(breaks=seq(2002,2014,1))
pltAlpha_CCM_TE_Thre
pltAlpha_CCM_TE_Thre <- ggplot(vizAlphaCCM_TE_Thre,aes(x = timeScaleCut,y = AlphaValueThre,color = alphaTypeThre)) +
xlab('Year') + ylab(expression(paste('Real ',alpha,'(t)'))) +
ylim(c(0,15)) +
geom_line(size = 1) +
theme_bw() +
scale_color_manual(labels = c('CCM','TE',expression(paste('Real ',alpha,'(t)'))),
values=c('blue','red','forestgreen')) +
theme(legend.position = 'top',
legend.direction = 'horizontal',
legend.margin = margin(t = 0,unit = 'cm'),
legend.text = element_text(hjust=0.5, vjust=0.5,size = 20)) +
theme(legend.title=element_blank()) +
theme(axis.text = element_text(hjust=0.5, vjust=0.5,size = 20)) +
theme(axis.title = element_text(hjust=0.5, vjust=0.5,size = 20)) +
scale_x_continuous(breaks=seq(2002,2014,1))
pltAlpha_CCM_TE_Thre
pltAlpha_CCM_TE_Thre <- ggplot(vizAlphaCCM_TE_Thre,aes(x = timeScaleCut,y = AlphaValueThre,color = alphaTypeThre)) +
xlab('Year') + ylab(expression(paste(alpha,'(t)',',',alpha,'(g)'))) +
ylim(c(0,15)) +
geom_line(size = 1) +
theme_bw() +
scale_color_manual(labels = c('CCM','TE',expression(paste('Real ',alpha,'(t)'))),
values=c('blue','red','forestgreen')) +
theme(legend.position = 'top',
legend.direction = 'horizontal',
legend.margin = margin(t = 0,unit = 'cm'),
legend.text = element_text(hjust=0.5, vjust=0.5,size = 20)) +
theme(legend.title=element_blank()) +
theme(axis.text = element_text(hjust=0.5, vjust=0.5,size = 20)) +
theme(axis.title = element_text(hjust=0.5, vjust=0.5,size = 20)) +
scale_x_continuous(breaks=seq(2002,2014,1))
pltAlpha_CCM_TE_Thre
